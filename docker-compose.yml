version: '3.8'

services:
  publisher:
    stop_grace_period: 120s
    restart: unless-stopped
    image: andriiuni/events:latest
    environment:
      EVENT_ENDPOINT: http://gateway:3000/events
    networks:
      - app-network

  gateway:
    stop_grace_period: 120s
    restart: unless-stopped
    depends_on:
      - prisma-migrate
      - postgres
      - publisher
    build:
      context: gateway
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://admin:123456@postgres/main
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health/liveness']
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    command:
      [
        'bash',
        'wait-for-it.sh',
        'postgres:5432',
        '--',
        'npm',
        'run',
        'start:prod',
      ]

  gateway-processor:
    stop_grace_period: 60s
    restart: unless-stopped
    depends_on:
      - nats
      - gateway
    build:
      context: gateway-processor
    environment:
      NODE_ENV: production
      NATS_URL: nats:4222
      DATABASE_URL: postgres://admin:123456@postgres/main
      OUTBOX_POLL_INTERVAL_MS: 500
      OUTBOX_BATCH_SIZE: 500
      OUTBOX_MAX_RETRIES: 2
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health/liveness']
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    command:
      ['bash', 'wait-for-it.sh', 'nats:4222', '--', 'npm', 'run', 'start:prod']

  nats:
    stop_grace_period: 60s
    restart: unless-stopped
    image: nats:latest
    command: ['--jetstream', '--store_dir', '/data/jetstream', '-m', '8222']
    volumes:
      - nats-data:/data/jetstream
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget -q --spider http://localhost:8222/healthz || exit 1',
        ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  postgres:
    stop_grace_period: 120s
    restart: unless-stopped
    image: postgres:latest
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: '123456'
      POSTGRES_DB: main
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

  fb-collector:
    stop_grace_period: 60s
    restart: unless-stopped
    depends_on:
      - gateway-processor
    build:
      context: fb-collector
    environment:
      NODE_ENV: production
      NATS_URL: nats:4222
      NATS_STREAM: FACEBOOK
      NATS_CONSUMER: fb-collector
      DATABASE_URL: postgres://admin:123456@postgres/main
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health/liveness']
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    command:
      [
        'bash',
        'wait-for-it.sh',
        'gateway-processor:4222',
        '--',
        'npm',
        'run',
        'start:prod',
      ]

  ttk-collector:
    stop_grace_period: 60s
    restart: unless-stopped
    depends_on:
      - gateway-processor
    build:
      context: ttk-collector
    environment:
      NODE_ENV: production
      NATS_URL: nats:4222
      NATS_STREAM: TIKTOK
      NATS_CONSUMER: ttk-collector
      DATABASE_URL: postgres://admin:123456@postgres/main
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health/liveness']
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    command:
      [
        'bash',
        'wait-for-it.sh',
        'gateway-processor:4222',
        '--',
        'npm',
        'run',
        'start:prod',
      ]

  reporter:
    restart: unless-stopped
    depends_on:
      - prisma-migrate
      - postgres
    build:
      context: reporter
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://admin:123456@postgres/main
    networks:
      - app-network
    ports:
      - '3000:3000'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health/liveness']
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    command:
      [
        'bash',
        'wait-for-it.sh',
        'postgres:5432',
        '--',
        'npm',
        'run',
        'start:prod',
      ]

  prometheus:
    restart: unless-stopped
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - app-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget -q --spider http://localhost:9090/-/ready || exit 1',
        ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

  grafana:
    restart: unless-stopped
    image: grafana/grafana:latest
    ports:
      - '3001:3000'
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    networks:
      - app-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget -q --spider http://localhost:3000/api/health || exit 1',
        ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 60s

  prisma-migrate:
    build: migration-runner
    environment:
      DATABASE_URL: postgres://admin:123456@postgres/main
    depends_on:
      - postgres
    networks:
      - app-network

volumes:
  nats-data:
  postgres-data:
  grafana-data:

networks:
  app-network:
